/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.swagger_codegen_maven.api;

import com.example.swagger_codegen_maven.model.Offre;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Offre", description = "the Offre API")
public interface OffreApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/offres : create an Offre
     * create an Offre
     *
     * @param offre  (optional)
     * @return Created Offre (status code 201)
     *         or error when creating an offer (status code 400)
     */
    @Operation(
        operationId = "addUpdateOffre",
        summary = "create an Offre",
        description = "create an Offre",
        tags = { "Offre" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created Offre", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Offre.class))
            }),
            @ApiResponse(responseCode = "400", description = "error when creating an offer")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/offres",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Offre> _addUpdateOffre(
        @Parameter(name = "Offre", description = "") @Valid @RequestBody(required = false) Offre offre
    ) throws Exception {
        return addUpdateOffre(offre);
    }

    // Override this method
    default  ResponseEntity<Offre> addUpdateOffre(Offre offre) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"createdAt\" : \"\", \"annonce\" : { \"date\" : \"date\", \"distance\" : 0.8008281904610115, \"prix\" : 6.027456183070403, \"titre\" : \"\", \"author\" : { \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }, \"offres\" : 1.4658129805029452, \"destination\" : { \"zipCode\" : \"zipCode\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"city\" : \"city\", \"libelle\" : \"libelle\" }, \"photos\" : [ \"photos\", \"photos\" ], \"createdAt\" : \"\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"id\" : \"id\", \"departure\" : { \"zipCode\" : \"zipCode\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"city\" : \"city\", \"libelle\" : \"libelle\" }, \"open\" : true }, \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"prix\" : 0.8008281904610115, \"author\" : { \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }, \"id\" : \"id\", \"status\" : \"REFUSED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/offre/{id}
     *
     * @param id  (required)
     * @param byAdmin  (optional)
     * @return offer deleted (status code 200)
     *         or error when deleting an offer (status code 400)
     */
    @Operation(
        operationId = "deleteOffre",
        tags = { "Offre" },
        responses = {
            @ApiResponse(responseCode = "200", description = "offer deleted"),
            @ApiResponse(responseCode = "400", description = "error when deleting an offer")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/offre/{id}"
    )
    default ResponseEntity<Void> _deleteOffre(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin
    ) throws Exception {
        return deleteOffre(id, byAdmin);
    }

    // Override this method
    default  ResponseEntity<Void> deleteOffre(String id, String byAdmin) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/offres : get all Offers of a specific announce
     * get all Offers of a specific announce
     *
     * @param annonceId  (optional, default to )
     * @param authorId  (optional, default to )
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param byAdmin  (optional)
     * @return get successfully (status code 200)
     */
    @Operation(
        operationId = "getOffreByAnnonceId",
        summary = "get all Offers of a specific announce",
        description = "get all Offers of a specific announce",
        tags = { "Offre" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/offres",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> _getOffreByAnnonceId(
        @Parameter(name = "annonce_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "annonce_id", required = false, defaultValue = "") String annonceId,
        @Parameter(name = "author_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "author_id", required = false, defaultValue = "") String authorId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin
    ) throws Exception {
        return getOffreByAnnonceId(annonceId, authorId, page, size, byAdmin);
    }

    // Override this method
    default  ResponseEntity<Object> getOffreByAnnonceId(String annonceId, String authorId, Integer page, Integer size, String byAdmin) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/offre/{id}
     *
     * @param id  (required)
     * @param byAdmin  (optional)
     * @return get successfully (status code 200)
     *         or error when getting (status code 400)
     */
    @Operation(
        operationId = "getOffreById",
        tags = { "Offre" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Offre.class))
            }),
            @ApiResponse(responseCode = "400", description = "error when getting")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/offre/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Offre> _getOffreById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin
    ) throws Exception {
        return getOffreById(id, byAdmin);
    }

    // Override this method
    default  ResponseEntity<Offre> getOffreById(String id, String byAdmin) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"createdAt\" : \"\", \"annonce\" : { \"date\" : \"date\", \"distance\" : 0.8008281904610115, \"prix\" : 6.027456183070403, \"titre\" : \"\", \"author\" : { \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }, \"offres\" : 1.4658129805029452, \"destination\" : { \"zipCode\" : \"zipCode\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"city\" : \"city\", \"libelle\" : \"libelle\" }, \"photos\" : [ \"photos\", \"photos\" ], \"createdAt\" : \"\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"id\" : \"id\", \"departure\" : { \"zipCode\" : \"zipCode\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"city\" : \"city\", \"libelle\" : \"libelle\" }, \"open\" : true }, \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"prix\" : 0.8008281904610115, \"author\" : { \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }, \"id\" : \"id\", \"status\" : \"REFUSED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/offre/{id}
     *
     * @param id  (required)
     * @param byAdmin  (optional)
     * @return updated successfully (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "updateOffre",
        tags = { "Offre" },
        responses = {
            @ApiResponse(responseCode = "200", description = "updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Offre.class))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/offre/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Offre> _updateOffre(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin
    ) throws Exception {
        return updateOffre(id, byAdmin);
    }

    // Override this method
    default  ResponseEntity<Offre> updateOffre(String id, String byAdmin) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"createdAt\" : \"\", \"annonce\" : { \"date\" : \"date\", \"distance\" : 0.8008281904610115, \"prix\" : 6.027456183070403, \"titre\" : \"\", \"author\" : { \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }, \"offres\" : 1.4658129805029452, \"destination\" : { \"zipCode\" : \"zipCode\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"city\" : \"city\", \"libelle\" : \"libelle\" }, \"photos\" : [ \"photos\", \"photos\" ], \"createdAt\" : \"\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"id\" : \"id\", \"departure\" : { \"zipCode\" : \"zipCode\", \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"city\" : \"city\", \"libelle\" : \"libelle\" }, \"open\" : true }, \"deletedAt\" : \"deletedAt\", \"deleted\" : true, \"prix\" : 0.8008281904610115, \"author\" : { \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }, \"id\" : \"id\", \"status\" : \"REFUSED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
