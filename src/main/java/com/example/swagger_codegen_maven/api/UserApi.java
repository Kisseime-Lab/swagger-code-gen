/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.swagger_codegen_maven.api;

import com.example.swagger_codegen_maven.model.InputPassword;
import com.example.swagger_codegen_maven.model.PasswordValidated;
import com.example.swagger_codegen_maven.model.RefreshToken;
import com.example.swagger_codegen_maven.model.SignInReq;
import com.example.swagger_codegen_maven.model.SignedInUser;
import com.example.swagger_codegen_maven.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/v1/users : delete an user
     * delete an user
     *
     * @param email  (optional, default to )
     * @param byAdmin  (optional)
     * @return delete successfully (status code 200)
     *         or error when deleting (status code 400)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "delete an user",
        description = "delete an user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "delete successfully"),
            @ApiResponse(responseCode = "400", description = "error when deleting")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/users"
    )
    default ResponseEntity<Void> _deleteUser(
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false, defaultValue = "") String email,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin
    ) throws Exception {
        return deleteUser(email, byAdmin);
    }

    // Override this method
    default  ResponseEntity<Void> deleteUser(String email, String byAdmin) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/token/refresh : Provides new JWT based on valid refresh token.
     * Provides JWT based on valid refresh token.
     *
     * @param refreshToken  (optional)
     * @return For successful operation. (status code 200)
     */
    @Operation(
        operationId = "getAccessToken",
        summary = "Provides new JWT based on valid refresh token.",
        description = "Provides JWT based on valid refresh token.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful operation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SignedInUser.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/auth/token/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SignedInUser> _getAccessToken(
        @Parameter(name = "RefreshToken", description = "") @Valid @RequestBody(required = false) RefreshToken refreshToken
    ) throws Exception {
        return getAccessToken(refreshToken);
    }

    // Override this method
    default  ResponseEntity<SignedInUser> getAccessToken(RefreshToken refreshToken) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"accessToken\" : \"accessToken\", \"userId\" : \"userId\", \"refreshToken\" : \"refreshToken\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/users : get user by email
     * get user by email
     *
     * @param email  (optional, default to )
     * @param userId  (optional, default to )
     * @param byAdmin  (optional)
     * @return get successfully (status code 200)
     */
    @Operation(
        operationId = "getUserbyEmailOrId",
        summary = "get user by email",
        description = "get user by email",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/users",
        produces = { "application/json" }
    )
    default ResponseEntity<User> _getUserbyEmailOrId(
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false, defaultValue = "") String email,
        @Parameter(name = "user_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "user_id", required = false, defaultValue = "") String userId,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin
    ) throws Exception {
        return getUserbyEmailOrId(email, userId, byAdmin);
    }

    // Override this method
    default  ResponseEntity<User> getUserbyEmailOrId(String email, String userId, String byAdmin) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/token : Signin the customer (user)
     * Generates the JWT and refresh token
     *
     * @param signInReq  (optional)
     * @return Returns the access and refresh token. (status code 200)
     */
    @Operation(
        operationId = "signIn",
        summary = "Signin the customer (user)",
        description = "Generates the JWT and refresh token",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the access and refresh token.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SignedInUser.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/auth/token",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SignedInUser> _signIn(
        @Parameter(name = "SignInReq", description = "") @Valid @RequestBody(required = false) SignInReq signInReq
    ) throws Exception {
        return signIn(signInReq);
    }

    // Override this method
    default  ResponseEntity<SignedInUser> signIn(SignInReq signInReq) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"accessToken\" : \"accessToken\", \"userId\" : \"userId\", \"refreshToken\" : \"refreshToken\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/auth/token : Signouts the customer (user)
     * Signouts the customer (user).
     *
     * @param refreshToken  (optional)
     * @return Accepts the request for logout. (status code 202)
     */
    @Operation(
        operationId = "signOut",
        summary = "Signouts the customer (user)",
        description = "Signouts the customer (user).",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepts the request for logout.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/auth/token",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _signOut(
        @Parameter(name = "RefreshToken", description = "") @Valid @RequestBody(required = false) RefreshToken refreshToken
    ) throws Exception {
        return signOut(refreshToken);
    }

    // Override this method
    default  ResponseEntity<Void> signOut(RefreshToken refreshToken) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/users : Signup the a new customer (user)
     * Creates a new customer (user)
     *
     * @param user  (optional)
     * @return For successful user creation. (status code 201)
     */
    @Operation(
        operationId = "signUp",
        summary = "Signup the a new customer (user)",
        description = "Creates a new customer (user)",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "For successful user creation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SignedInUser.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SignedInUser> _signUp(
        @Parameter(name = "User", description = "") @Valid @RequestBody(required = false) User user
    ) throws Exception {
        return signUp(user);
    }

    // Override this method
    default  ResponseEntity<SignedInUser> signUp(User user) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"accessToken\" : \"accessToken\", \"userId\" : \"userId\", \"refreshToken\" : \"refreshToken\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/users : update an user
     * update an user
     *
     * @param email  (optional, default to )
     * @param byAdmin  (optional)
     * @param user  (optional)
     * @return update successfully (status code 200)
     *         or error when updating (status code 400)
     */
    @Operation(
        operationId = "updateUser",
        summary = "update an user",
        description = "update an user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "update successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "error when updating")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> _updateUser(
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false, defaultValue = "") String email,
        @Parameter(name = "byAdmin", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "byAdmin", required = false) String byAdmin,
        @Parameter(name = "User", description = "") @Valid @RequestBody(required = false) User user
    ) throws Exception {
        return updateUser(email, byAdmin, user);
    }

    // Override this method
    default  ResponseEntity<User> updateUser(String email, String byAdmin, User user) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"createdAt\" : \"createdAt\", \"firstname\" : \"firstname\", \"password\" : \"password\", \"deletedAt\" : \"deletedAt\", \"role\" : \"role\", \"deleted\" : true, \"phone\" : \"phone\", \"id\" : \"id\", \"emailValidated\" : true, \"username\" : \"username\", \"lastname\" : \"lastname\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/verify-password : verify password
     * verify password
     *
     * @param inputPassword  (optional)
     * @return checked successfully (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "verifyPassword",
        summary = "verify password",
        description = "verify password",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "checked successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PasswordValidated.class))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/verify-password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PasswordValidated> _verifyPassword(
        @Parameter(name = "InputPassword", description = "") @Valid @RequestBody(required = false) InputPassword inputPassword
    ) throws Exception {
        return verifyPassword(inputPassword);
    }

    // Override this method
    default  ResponseEntity<PasswordValidated> verifyPassword(InputPassword inputPassword) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"passwordValidated\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
